-- 0) ENUM 타입 정의
CREATE TYPE app_state AS ENUM ('closed_test', 'published');
CREATE TYPE platform_type AS ENUM ('android', 'ios', 'both');
CREATE TYPE participation_status AS ENUM ('pending', 'completed', 'reported', 'failed');
CREATE TYPE request_status AS ENUM ('open', 'test', 'closed'); -- open, test, closed
CREATE TYPE request_type AS ENUM ('test', 'review');

-- 1) users 테이블
CREATE TABLE users (
  id           UUID          PRIMARY KEY DEFAULT auth.uid(),
  email        TEXT          NOT NULL UNIQUE,
  display_name TEXT          NOT NULL,
  trust_score  INT           NOT NULL DEFAULT 0,
  platform     platform_type NOT NULL DEFAULT 'android',
  created_at   TIMESTAMPTZ   NOT NULL DEFAULT now()
);

-- 2) user_apps 테이블
CREATE TABLE user_apps (
  id            UUID          PRIMARY KEY DEFAULT gen_random_uuid(),
  owner_id      UUID          NOT NULL REFERENCES users(id) ON DELETE CASCADE,
  app_name      TEXT          NOT NULL,
  package_name  TEXT          NOT NULL,
  app_state     app_state     NOT NULL,
  cafe_url      TEXT,
  created_at    TIMESTAMPTZ   NOT NULL DEFAULT now()
);

-- 3) requests 테이블
CREATE TABLE requests (
  id                   UUID            PRIMARY KEY DEFAULT gen_random_uuid(),
  target_app_id        UUID            NOT NULL REFERENCES user_apps(id) ON DELETE CASCADE,
  description          TEXT,
  owner_id             UUID            NOT NULL REFERENCES users(id) ON DELETE CASCADE,
  status               request_status  NOT NULL DEFAULT 'open',
  request_type         request_type    NOT NULL DEFAULT 'test',
  current_participants INT             NOT NULL DEFAULT 0,
  created_at           TIMESTAMPTZ     NOT NULL DEFAULT now()
);

-- 4) participations 테이블 (새 구조)
CREATE TABLE participations (
  id                 UUID                  PRIMARY KEY DEFAULT gen_random_uuid(),
  request_id         UUID                  NOT NULL REFERENCES requests(id) ON DELETE CASCADE, -- 내가 참여하는 요청
  user_id            UUID                  NOT NULL REFERENCES users(id) ON DELETE CASCADE,     -- 참여자
  target_request_id  UUID                  REFERENCES requests(id) ON DELETE CASCADE, -- 도움받고 싶은 요청 (nullable)
  status             participation_status  NOT NULL DEFAULT 'pending',
  proof_url          TEXT,
  requested_at       TIMESTAMPTZ           NOT NULL DEFAULT now(),
  completed_at       TIMESTAMPTZ
);

-- 한 사용자가 동일 요청에 중복 참여하지 못하도록 UNIQUE 제약 추가
ALTER TABLE participations
ADD CONSTRAINT unique_request_per_user UNIQUE (request_id, user_id);

-- 5) notifications 테이블
CREATE TABLE notifications (
  id          UUID        PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id     UUID        NOT NULL REFERENCES users(id) ON DELETE CASCADE,
  type        TEXT        NOT NULL,
  message     TEXT        NOT NULL,
  created_at  TIMESTAMPTZ NOT NULL DEFAULT now()
);

-- 6) reports 테이블
CREATE TABLE reports (
  id               UUID        PRIMARY KEY DEFAULT gen_random_uuid(),
  participation_id UUID        NOT NULL REFERENCES participations(id) ON DELETE CASCADE,
  reporter_id      UUID        NOT NULL REFERENCES users(id) ON DELETE CASCADE,
  reason           TEXT        NOT NULL,
  created_at       TIMESTAMPTZ NOT NULL DEFAULT now(),
  resolved         BOOLEAN     NOT NULL DEFAULT FALSE,
  resolved_at      TIMESTAMPTZ
);

-- 7) RLS 활성화
ALTER TABLE users            ENABLE ROW LEVEL SECURITY;
ALTER TABLE user_apps        ENABLE ROW LEVEL SECURITY;
ALTER TABLE requests         ENABLE ROW LEVEL SECURITY;
ALTER TABLE participations   ENABLE ROW LEVEL SECURITY;
ALTER TABLE notifications    ENABLE ROW LEVEL SECURITY;
ALTER TABLE reports          ENABLE ROW LEVEL SECURITY;

-- 8) RLS 정책

-- users
CREATE POLICY users_select_own ON users
  FOR SELECT USING ( auth.uid() = id );
CREATE POLICY users_select_all ON users
  FOR SELECT USING ( true );
CREATE POLICY users_update_own ON users
  FOR UPDATE USING ( auth.uid() = id );
CREATE POLICY users_insert_own ON users
  FOR INSERT WITH CHECK ( auth.uid() = id );

-- user_apps
CREATE POLICY apps_select_all ON user_apps
  FOR SELECT USING ( true );
CREATE POLICY apps_insert_per_user ON user_apps
  FOR INSERT WITH CHECK ( owner_id = auth.uid() );
CREATE POLICY apps_update_per_user ON user_apps
  FOR UPDATE USING ( owner_id = auth.uid() );
CREATE POLICY apps_delete_per_user ON user_apps
  FOR DELETE USING ( owner_id = auth.uid() );

-- requests
CREATE POLICY requests_select ON requests
  FOR SELECT USING ( true );
CREATE POLICY requests_insert ON requests
  FOR INSERT WITH CHECK ( owner_id = auth.uid() );
CREATE POLICY requests_update_own ON requests
  FOR UPDATE USING ( owner_id = auth.uid() );
CREATE POLICY requests_delete_own ON requests
  FOR DELETE USING ( owner_id = auth.uid() );

-- participations
CREATE POLICY parts_select ON participations
  FOR SELECT USING (
    request_id IN (
      SELECT id FROM requests
    )
  );

CREATE POLICY parts_insert_with_app ON participations
  FOR INSERT WITH CHECK (
    auth.uid() = user_id
  );

CREATE POLICY parts_update_own ON participations
  FOR UPDATE USING (
    user_id = auth.uid()
    OR request_id IN (
      SELECT id FROM requests WHERE owner_id = auth.uid()
    )
  );

CREATE POLICY parts_delete_only_if_request_open ON participations
    FOR DELETE
    USING (
      user_id = auth.uid()
      AND request_id IN (
        SELECT id FROM requests WHERE status = 'open'
      )
    );

-- notifications
CREATE POLICY noti_select ON notifications
  FOR SELECT USING ( user_id = auth.uid() );

-- reports
CREATE POLICY reports_insert ON reports
  FOR INSERT WITH CHECK ( reporter_id = auth.uid() );
CREATE POLICY reports_select ON reports
  FOR SELECT USING ( reporter_id = auth.uid() );
CREATE POLICY reports_update ON reports
  FOR UPDATE USING ( FALSE );

-- 9) 트리거 및 함수
CREATE FUNCTION inc_request_count() RETURNS trigger LANGUAGE plpgsql AS $$
BEGIN
  UPDATE requests
    SET current_participants = current_participants + 1,
        status = CASE
          WHEN request_type = 'test' AND current_participants + 1 >= 12 THEN 'test'
          WHEN current_participants + 1 >= 12 THEN 'closed'
          ELSE status
        END
    WHERE id = NEW.request_id;
  RETURN NEW;
END; $$;

CREATE TRIGGER trg_inc_count
  AFTER INSERT ON participations
  FOR EACH ROW EXECUTE FUNCTION inc_request_count();

-- 9.2 참여자 삭제 시 참가자 수 감소
CREATE FUNCTION dec_request_count() RETURNS trigger LANGUAGE plpgsql AS $$
BEGIN
  UPDATE requests
    SET current_participants = current_participants - 1
    WHERE id = OLD.request_id;
  RETURN OLD;
END; $$;

CREATE TRIGGER trg_dec_count
  AFTER DELETE ON participations
  FOR EACH ROW EXECUTE FUNCTION dec_request_count();

CREATE FUNCTION adjust_trust_and_notify() RETURNS trigger LANGUAGE plpgsql AS $$
DECLARE
  owner UUID;
  trust_increase INT;
BEGIN
  SELECT owner_id INTO owner FROM requests WHERE id = NEW.request_id;

  IF (OLD.status <> 'completed' AND NEW.status = 'completed') THEN
    -- 보상 계산: target_request_id가 없으면 2배
    IF NEW.target_request_id IS NULL THEN
      trust_increase := 2;
    ELSE
      trust_increase := 1;
    END IF;

    UPDATE users SET trust_score = trust_score + trust_increase WHERE id = NEW.user_id;
    UPDATE users SET trust_score = trust_score + trust_increase WHERE id = owner;

    INSERT INTO notifications(user_id, type, message)
      VALUES (owner, 'participation_completed', '참여자가 완료했습니다.');
  END IF;

  IF (OLD.status <> 'failed' AND NEW.status = 'failed') THEN
    UPDATE users SET trust_score = trust_score - 1 WHERE id = NEW.user_id;
  END IF;

  RETURN NEW;
END;
$$;

CREATE TRIGGER trg_adjust_trust
  AFTER UPDATE ON participations
  FOR EACH ROW EXECUTE FUNCTION adjust_trust_and_notify();


CREATE POLICY notifications_insert_own ON notifications
  FOR INSERT
  WITH CHECK (auth.uid() = user_id);